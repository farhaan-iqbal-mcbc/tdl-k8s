-- Undo changes if required
DROP TABLE IF EXISTS TMN_DES_EVENT;
DROP TABLE IF EXISTS TMN_DES_EVENT_ROUTER;
DROP TABLE IF EXISTS TMN_DES_EVENT_ERROR;
DROP TABLE IF EXISTS TMN_DES_AVRO_SCHEMA_EVENT;
DROP TABLE IF EXISTS TMN_DES_CONFIG;
DROP TABLE IF EXISTS TMN_DES_CONFIG_INSTALL_LOG;


-- DDL to populate the Streaming database
CREATE TABLE TMN_DES_EVENT (ID NVARCHAR(255) NOT NULL PRIMARY KEY, DATAEVENTID NVARCHAR(255), DATAEVENTINDEX INT, CREATEDTIME DATETIME2(3), STAGINGTIME DATETIME2(3), EVENTTYPE NVARCHAR(2), ENTITYNAME NVARCHAR(40), ENTITYID NVARCHAR(255), EVENTDATA VARBINARY(MAX), REQUESTID NVARCHAR(255), PARTITIONID INT);
CREATE TABLE TMN_DES_EVENT_ROUTER (ID NVARCHAR(255) NOT NULL PRIMARY KEY, DATAEVENTID NVARCHAR(255), DISPATCHEDTIME DATETIME2(3), PARTITIONID INT);
CREATE TABLE TMN_DES_EVENT_ERROR (ID NVARCHAR(255) NOT NULL PRIMARY KEY, DATAEVENTID NVARCHAR(255), DATAEVENTSIZE INT, DATAEVENTINDEX INT, CREATEDTIME DATETIME2(3), FAILURETIME DATETIME2(3), EVENTTYPE NVARCHAR(2), ENTITYNAME NVARCHAR(40), ENTITYID NVARCHAR(255), EVENTDATA VARBINARY(MAX), DESCRIPTION NVARCHAR(255), ERRORTYPE NVARCHAR(150), REQUESTID NVARCHAR(255), ERRORSOURCE NVARCHAR(150), METADATA NVARCHAR(4000));
CREATE TABLE TMN_DES_AVRO_SCHEMA_EVENT (TABLENAME NVARCHAR(255) NOT NULL, AVROSCHEMA VARBINARY(MAX), FROMDATE DATETIME2(3) NOT NULL, TODATE DATETIME2(3) NOT NULL, SERIALIZATIONID NVARCHAR(255) DEFAULT 'N/A', STATUS NVARCHAR(20), CONSTRAINT TMN_DES_AVRO_SCHEMA_EVENT_PK PRIMARY KEY (TABLENAME, FROMDATE, SERIALIZATIONID));
CREATE TABLE TMN_DES_CONFIG (CONFIGURATION_ID NVARCHAR(255) NOT NULL, PROPERTY_KEY NVARCHAR(255) NOT NULL, PROPERTY_VALUE NVARCHAR(4000), DATE_MODIFIED NVARCHAR(255), USER_NAME NVARCHAR(255) NOT NULL, CONSTRAINT TMN_DES_CONFIG_PK PRIMARY KEY (CONFIGURATION_ID, PROPERTY_KEY));
CREATE TABLE TMN_DES_CONFIG_INSTALL_LOG(REFERENCE NVARCHAR(255) NOT NULL PRIMARY KEY, TIME DATETIME2(0), STATUS NVARCHAR(16), DETAILS NVARCHAR(max));
