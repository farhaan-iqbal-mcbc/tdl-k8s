-- Undo changes if required

DROP TABLE IF EXISTS F_DATA_EVENTS;
DROP TABLE IF EXISTS F_DATA_EVENTS_ILP;
DROP TABLE IF EXISTS FBNK_DATA_EVENTS;
DROP TABLE IF EXISTS FBNK_DATA_EVENTS_ILP;
DROP TABLE IF EXISTS FCOD_DATA_EVENTS;
DROP TABLE IF EXISTS FCOD_DATA_EVENTS_ILP;
DROP VIEW IF EXISTS V_F_RR_XSD_EVENTS_DES;
DROP TABLE IF EXISTS F_RR_XSD_EVENTS;
DROP TABLE IF EXISTS TAFJ_CACHE_KS_INIT;
DROP TABLE IF EXISTS TAFJ_CACHE_CONFIG;
DROP TABLE IF EXISTS TAFJ_CONFIGURATION;
DROP TABLE IF EXISTS TAFJ_CACHE;
DROP VIEW IF EXISTS V_F_EB_DES_CONFIG;
DROP TABLE IF EXISTS F_EB_DES_CONFIG;
IF( EXISTS( SELECT * FROM sys.partition_schemes WHERE name = 'PARTITIONIDSCHEME' ) )
BEGIN
 DROP PARTITION SCHEME PARTITIONIDSCHEME
END;
IF( EXISTS( SELECT * FROM sys.partition_functions WHERE name = 'PARTITIONIDFUNCTION' ) )
BEGIN
 DROP PARTITION FUNCTION PARTITIONIDFUNCTION
END;

-- IF Flow Catalog table
IF COL_LENGTH('F_IF_INTEGRATION_FL002','AVRO_CONVERSION_STATUS') IS NULL
BEGIN
    ALTER TABLE F_IF_INTEGRATION_FL002 ADD AVRO_CONVERSION_STATUS NVARCHAR(10) DEFAULT NULL
END;


CREATE PARTITION FUNCTION PARTITIONIDFUNCTION (INT) AS RANGE RIGHT FOR VALUES ('2','3','4','5');
CREATE PARTITION SCHEME PARTITIONIDSCHEME AS PARTITION PARTITIONIDFUNCTION ALL TO ([PRIMARY]);

-- Data event table
CREATE TABLE F_DATA_EVENTS (
    RECID                     NVARCHAR(255) NOT NULL,
    XMLRECORD                 NVARCHAR(MAX),
    CREATEDTIME               DATETIME2(3) DEFAULT CURRENT_TIMESTAMP,
    PROCESSEDTIME             DATETIME2(3),
    PARTITIONID		          INTEGER DEFAULT 1,
    CONSTRAINT [PK_F_DATA_EVENTS] PRIMARY KEY NONCLUSTERED(RECID) ON [PRIMARY])
	ON PARTITIONIDSCHEME(PARTITIONID);

CREATE TABLE F_DATA_EVENTS_ILP (
    RECID                     NVARCHAR(255) NOT NULL,
    XMLRECORD                 NVARCHAR(MAX),
    CREATEDTIME               DATETIME2(3) DEFAULT CURRENT_TIMESTAMP,
    PROCESSEDTIME             DATETIME2(3),
    PARTITIONID		          INTEGER DEFAULT 1,
    CONSTRAINT [PK_F_DATA_EVENTS_ILP] PRIMARY KEY NONCLUSTERED(RECID) ON [PRIMARY])
	ON PARTITIONIDSCHEME(PARTITIONID);

-- Create partitioned data event tables
CREATE TABLE FBNK_DATA_EVENTS (
    RECID                     NVARCHAR(255) NOT NULL,
    XMLRECORD                 NVARCHAR(MAX),
    CREATEDTIME               DATETIME2(3) DEFAULT CURRENT_TIMESTAMP,
    PROCESSEDTIME             DATETIME2(3),
    PARTITIONID		          INTEGER DEFAULT 1,
    CONSTRAINT [PK_FBNK_DATA_EVENTS] PRIMARY KEY NONCLUSTERED(RECID) ON [PRIMARY])
	ON PARTITIONIDSCHEME(PARTITIONID);

CREATE TABLE FBNK_DATA_EVENTS_ILP (
    RECID                     NVARCHAR(255) NOT NULL,
    XMLRECORD                 NVARCHAR(MAX),
    CREATEDTIME               DATETIME2(3) DEFAULT CURRENT_TIMESTAMP,
    PROCESSEDTIME             DATETIME2(3),
    PARTITIONID		          INTEGER DEFAULT 1,
    CONSTRAINT [PK_FBNK_DATA_EVENTS_ILP] PRIMARY KEY NONCLUSTERED(RECID) ON [PRIMARY])
	ON PARTITIONIDSCHEME(PARTITIONID);

-- Create partitioned data event tables
CREATE TABLE FCOD_DATA_EVENTS (
    RECID                     NVARCHAR(255) NOT NULL,
    XMLRECORD                 NVARCHAR(MAX),
    CREATEDTIME               DATETIME2(3) DEFAULT CURRENT_TIMESTAMP,
    PROCESSEDTIME             DATETIME2(3),
    PARTITIONID		          INTEGER DEFAULT 1,
    CONSTRAINT [PK_FCOD_DATA_EVENTS] PRIMARY KEY NONCLUSTERED(RECID) ON [PRIMARY])
	ON PARTITIONIDSCHEME(PARTITIONID);

CREATE TABLE FCOD_DATA_EVENTS_ILP (
    RECID                     NVARCHAR(255) NOT NULL,
    XMLRECORD                 NVARCHAR(MAX),
    CREATEDTIME               DATETIME2(3) DEFAULT CURRENT_TIMESTAMP,
    PROCESSEDTIME             DATETIME2(3),
    PARTITIONID		          INTEGER DEFAULT 1,
    CONSTRAINT [PK_FCOD_DATA_EVENTS_ILP] PRIMARY KEY NONCLUSTERED(RECID) ON [PRIMARY])
	ON PARTITIONIDSCHEME(PARTITIONID);


CREATE INDEX F_DATA_EVENTS_TIMES on F_DATA_EVENTS (PARTITIONID, CREATEDTIME);
CREATE INDEX F_DATA_EVENTS_KEY on F_DATA_EVENTS (PARTITIONID, RECID);

CREATE INDEX F_DATA_EVENTS_ILP_TIMES on F_DATA_EVENTS_ILP (PARTITIONID, CREATEDTIME);
CREATE INDEX F_DATA_EVENTS_ILP_KEY on F_DATA_EVENTS_ILP (PARTITIONID, RECID);

CREATE INDEX FBNK_DATA_EVENTS_TIMES on FBNK_DATA_EVENTS (PARTITIONID, CREATEDTIME);
CREATE INDEX FBNK_DATA_EVENTS_KEY on FBNK_DATA_EVENTS (PARTITIONID, RECID);

CREATE INDEX FBNK_DATA_EVENTS_ILP_TIMES on FBNK_DATA_EVENTS_ILP (PARTITIONID, CREATEDTIME);
CREATE INDEX FBNK_DATA_EVENTS_ILP_KEY on FBNK_DATA_EVENTS_ILP (PARTITIONID, RECID);

CREATE INDEX FCOD_DATA_EVENTS_TIMES on FCOD_DATA_EVENTS (PARTITIONID, CREATEDTIME);
CREATE INDEX FCOD_DATA_EVENTS_KEY on FCOD_DATA_EVENTS (PARTITIONID, RECID);

CREATE INDEX FCOD_DATA_EVENTS_ILP_TIMES on FCOD_DATA_EVENTS_ILP (PARTITIONID, CREATEDTIME);
CREATE INDEX FCOD_DATA_EVENTS_ILP_KEY on FCOD_DATA_EVENTS_ILP (PARTITIONID, RECID);

CREATE TABLE [dbo].[F_RR_XSD_EVENTS](
	[RECID] [nvarchar](255) NOT NULL,
	[XMLRECORD] [xml] NULL,
	[AVRO_CONVERSION_STATUS] [nvarchar](10) NULL,
PRIMARY KEY CLUSTERED
(
	[RECID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];

CREATE VIEW [dbo].[V_F_RR_XSD_EVENTS_DES] AS
  SELECT
    a.RECID,
    a.XMLRECORD.value('data(/row/c1)[1]', 'NVARCHAR(max)') "FROM_DATE",
    a.XMLRECORD.value('data(/row/c2)[1]', 'NVARCHAR(max)') "TO_DATE",
    a.XMLRECORD.value('data(/row/c3)[1]', 'NVARCHAR(max)') "TABLE_NAME",
    a.XMLRECORD.value('data(/row/c4)[1]', 'NVARCHAR(max)') "XSD",
    a.XMLRECORD.value('data(/row/c5)[1]', 'NVARCHAR(max)') "COMPANY",
    a.XMLRECORD.value('data(/row/c6)[1]', 'NVARCHAR(max)') "FILE_TYPE",
    a.XMLRECORD.value('data(/row/c7)[1]', 'NVARCHAR(max)') "SOURCE_TABLE_NAME",
    a.XMLRECORD.value('data(/row/c8)[1]', 'NVARCHAR(max)') "SNAPSHOT_FLAG",
    a.XMLRECORD.value('data(/row/c9)[1]', 'NVARCHAR(max)') "SNAPSHOT_CHILD_FLAG",
    a.AVRO_CONVERSION_STATUS
  FROM F_RR_XSD_EVENTS a;

-- Cache initialisation table
CREATE TABLE TAFJ_CACHE_KS_INIT (
    RECID                     VARCHAR(255),
    CONSTRAINT TAFJ_CACHE_KS_INIT_PK PRIMARY KEY (RECID));
INSERT INTO TAFJ_CACHE_KS_INIT VALUES ('Waz7G611E%+6291Tqz');

-- Cache configuration table
CREATE TABLE TAFJ_CACHE_CONFIG (
    CONFIGURATION_ID          NVARCHAR(255) NOT NULL,
    PROPERTY_KEY              NVARCHAR(255) NOT NULL,
    PROPERTY_VALUE            NVARCHAR(4000),
    DATE_MODIFIED             NVARCHAR(255),
    USER_NAME                 NVARCHAR(255) NOT NULL,
    CONSTRAINT TAFJ_CACHE_CONFIG_PK PRIMARY KEY (CONFIGURATION_ID, PROPERTY_KEY));
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.encrypt.objects.stringtypes', '${SQL_TEMN_CACHE_ENCRYPT_OBJECTS_STRINGTYPES:false}', NULL, 'System');
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.put.async.max-in-flight', '5', NULL, 'System');
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.put.async.backpressure.enabled', 'false', NULL, 'System');
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.external.caching.provider','org.apache.ignite.IgniteProvider',NULL, 'System');
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.ignite.conf.file.name','',NULL, 'System');
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.tafj.cache.ignite.check.ips','false',NULL, 'System');
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.ignite.password','6fiHGU8oaQ+F8KdDw9v5jQ==',NULL, 'System');
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.ignite.tnx.timeout','0',NULL, 'System');
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.jdbc.pool.initial.size','1',NULL, 'System');
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.jdbc.pool.min.size','1',NULL, 'System');
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.jdbc.pool.max.size','100',NULL, 'System');

-- Cache mapping table
CREATE TABLE TAFJ_CACHE( RECID VARCHAR(255), CACHENAME VARCHAR(255), WRITEBATCHROWS NVARCHAR(5), CONSTRAINT TAFJ_CACHE_PK PRIMARY KEY (RECID));
DELETE FROM TAFJ_CACHE WHERE RECID = 'F.DATA.EVENTS';
DELETE FROM TAFJ_CACHE WHERE RECID = 'F.DATA.EVENTS_ILP';
DELETE FROM TAFJ_CACHE WHERE RECID = 'FBNK.DATA.EVENTS';
DELETE FROM TAFJ_CACHE WHERE RECID = 'FBNK.DATA.EVENTS_ILP';
DELETE FROM TAFJ_CACHE WHERE RECID = 'FCOD.DATA.EVENTS';
DELETE FROM TAFJ_CACHE WHERE RECID = 'FCOD.DATA.EVENTS_ILP';
INSERT INTO TAFJ_CACHE (RECID, CACHENAME) VALUES ('F.DATA.EVENTS','FDataEventCache');
INSERT INTO TAFJ_CACHE (RECID, CACHENAME) VALUES ('F.DATA.EVENTS_ILP','FDataEventCache');
INSERT INTO TAFJ_CACHE (RECID, CACHENAME) VALUES ('FBNK.DATA.EVENTS','FDataEventCache');
INSERT INTO TAFJ_CACHE (RECID, CACHENAME) VALUES ('FBNK.DATA.EVENTS_ILP','FDataEventCache');
INSERT INTO TAFJ_CACHE (RECID, CACHENAME) VALUES ('FCOD.DATA.EVENTS','FDataEventCache');
INSERT INTO TAFJ_CACHE (RECID, CACHENAME) VALUES ('FCOD.DATA.EVENTS_ILP','FDataEventCache');


--TAFJ_VOC
DELETE FROM TAFJ_VOC WHERE RECID = 'FBNK.DATA.EVENTS';
DELETE FROM TAFJ_VOC WHERE RECID = 'FBNK.DATA.EVENTS.ILP';
DELETE FROM TAFJ_VOC WHERE RECID = 'FCOD.DATA.EVENTS';
DELETE FROM TAFJ_VOC WHERE RECID = 'FCOD.DATA.EVENTS.ILP';
DELETE FROM TAFJ_VOC WHERE RECID = 'F.DATA.EVENTS';
DELETE FROM TAFJ_VOC WHERE RECID = 'F.DATA.EVENTS.ILP';

INSERT INTO TAFJ_VOC (RECID,ORCLFILENAME, ORCLDICTNAME, ISBLOB, ISRIGHTJUSTIFIED, ISREADONLY, ASSOCIATED, PDATEALIAS, OTHERATTRIBUTES, TABLEID) values ('FBNK.DATA.EVENTS', 'FBNK_DATA_EVENTS', 'D_F_DATA_EVENTS', 'C', 'Y', 'N', null, null, null, 10000024);
INSERT INTO TAFJ_VOC (RECID,ORCLFILENAME, ORCLDICTNAME, ISBLOB, ISRIGHTJUSTIFIED, ISREADONLY, ASSOCIATED, PDATEALIAS, OTHERATTRIBUTES, TABLEID) values ('FBNK.DATA.EVENTS.ILP', 'FBNK_DATA_EVENTS_ILP', 'D_F_DATA_EVENTS', 'C', 'Y', 'N', null, null, null, 10000025);
INSERT INTO TAFJ_VOC (RECID,ORCLFILENAME, ORCLDICTNAME, ISBLOB, ISRIGHTJUSTIFIED, ISREADONLY, ASSOCIATED, PDATEALIAS, OTHERATTRIBUTES, TABLEID) values ('FCOD.DATA.EVENTS', 'FCOD_DATA_EVENTS', 'D_F_DATA_EVENTS', 'C', 'Y', 'N', null, null, null, 10000026);
INSERT INTO TAFJ_VOC (RECID,ORCLFILENAME, ORCLDICTNAME, ISBLOB, ISRIGHTJUSTIFIED, ISREADONLY, ASSOCIATED, PDATEALIAS, OTHERATTRIBUTES, TABLEID) values ('FCOD.DATA.EVENTS.ILP', 'FCOD_DATA_EVENTS_ILP', 'D_F_DATA_EVENTS', 'C', 'Y', 'N', null, null, null, 10000027);
INSERT INTO TAFJ_VOC (RECID,ORCLFILENAME, ORCLDICTNAME, ISBLOB, ISRIGHTJUSTIFIED, ISREADONLY, ASSOCIATED, PDATEALIAS, OTHERATTRIBUTES, TABLEID) values ('F.DATA.EVENTS', 'F_DATA_EVENTS', 'D_F_DATA_EVENTS', 'C', 'Y', 'N', null, null, null, 10000028);
INSERT INTO TAFJ_VOC (RECID,ORCLFILENAME, ORCLDICTNAME, ISBLOB, ISRIGHTJUSTIFIED, ISREADONLY, ASSOCIATED, PDATEALIAS, OTHERATTRIBUTES, TABLEID) values ('F.DATA.EVENTS.ILP', 'F_DATA_EVENTS_ILP', 'D_F_DATA_EVENTS', 'C', 'Y', 'N', null, null, null, 10000029);

UPDATE TAFJ_VOC SET ISBLOB = 'X' WHERE RECID = 'F.RR.XSD.EVENTS'


-- TAFJ configuration table
CREATE TABLE TAFJ_CONFIGURATION (
    CONFIGURATION_ID          NVARCHAR(255) NOT NULL,
    PROPERTY_KEY              NVARCHAR(255) NOT NULL,
    PROPERTY_VALUE            NVARCHAR(4000),
    DATE_MODIFIED             NVARCHAR(255),
    USER_NAME                 NVARCHAR(255) NOT NULL,
    CONSTRAINT TAFJ_CONFIGURATION_PK PRIMARY KEY (CONFIGURATION_ID, PROPERTY_KEY));
-- TAFJ configuration takes presidence over TAFJCache configuration
INSERT INTO TAFJ_CONFIGURATION (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.tafj.runtime.use.external.caching', 'false', NULL, 'System');
INSERT INTO TAFJ_CONFIGURATION (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.use.des.for.f.data.events', 'true', NULL, 'System');
INSERT INTO TAFJ_CONFIGURATION (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.f.data.events.partition.size', '4', NULL, 'System');
INSERT INTO TAFJ_CONFIGURATION (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.external.caching.provider', 'org.apache.ignite.IgniteProvider', NULL, 'System');

-- DES configuration staging table
CREATE TABLE F_EB_DES_CONFIG (
    RECID                     NVARCHAR(255) NOT NULL,
    XMLRECORD                 NVARCHAR(max) NOT NULL,
    CONSTRAINT F_EB_DES_CONFIG_PK PRIMARY KEY (RECID)
);
--CREATE VIEW V_F_EB_DES_CONFIG (RECID, THE_RECORD, PROPERTY_KEY, PROPERTY_KEY_1, PROPERTY_VALUE, PROPERTY_VALUE_2, RESERVED_10, RESERVED_9, RESERVED_8, RESERVED_7, RESERVED_6, RESERVED_5, RESERVED_4, RESERVED_3, RESERVED_2, RESERVED_1) AS SELECT
--    A.RECID,
--    A.XMLRECORD AS THE_RECORD,
--    A.XMLRECORD.value('data(/row/c1)[1]', 'NVARCHAR(max)') "PROPERTY_KEY",
--    A.XMLRECORD AS PROPERTY_KEY_1,
--    A.XMLRECORD.value('data(/row/c2)[1]', 'NVARCHAR(max)') "PROPERTY_VALUE",
--    A.XMLRECORD AS PROPERTY_VALUE_2,
--    A.XMLRECORD.value('data(/row/c3)[1]', 'NVARCHAR(max)') "RESERVED_10",
--    A.XMLRECORD.value('data(/row/c4)[1]', 'NVARCHAR(max)') "RESERVED_9",
--    A.XMLRECORD.value('data(/row/c5)[1]', 'NVARCHAR(max)') "RESERVED_8",
--    A.XMLRECORD.value('data(/row/c6)[1]', 'NVARCHAR(max)') "RESERVED_7",
--    A.XMLRECORD.value('data(/row/c7)[1]', 'NVARCHAR(max)') "RESERVED_6",
--    A.XMLRECORD.value('data(/row/c8)[1]', 'NVARCHAR(max)') "RESERVED_5",
--    A.XMLRECORD.value('data(/row/c9)[1]', 'NVARCHAR(max)') "RESERVED_4",
--    A.XMLRECORD.value('data(/row/c10)[1]', 'NVARCHAR(max)') "RESERVED_3",
--    A.XMLRECORD.value('data(/row/c11)[1]', 'NVARCHAR(max)') "RESERVED_2",
--    A.XMLRECORD.value('data(/row/c12)[1]', 'NVARCHAR(max)') "RESERVED_1"
--FROM F_EB_DES_CONFIG A;

DROP SEQUENCE IF EXISTS partition_seq;
CREATE SEQUENCE partition_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 10000000 CYCLE CACHE 20;