# Common properties
temn.des.version = 2019-02-07T13:17:58.113
temn.des.db.connection.timeout.seconds = 300
temn.des.stream.vendor = kafka
temn.des.stream.message.split.size.kb = 100
temn.des.stream.producer.timeout.millis = 5000
temn.des.stream.kafka.bootstrap.servers = ${event.hub.resource.group.host}:${event.hub.resource.group.port}
temn.des.stream.kafka.transaction.enabled = false


# Schema properties
temn.des.schema.registry.url = http://schema-registry.des:8081
temn.des.schema.registry.subject.size = 50
temn.des.schema.registry.compatibility.mode = NONE
temn.des.schema.registry.bean.id = confluentSchemaRegistry
temn.des.schema.cache.local.expiry.seconds = 10
temn.des.schema.cache.local.max.size = 1000
temn.des.schema.name.prefix = null

# Data Repository
temn.des.data.repo.direct-db.access = true
temn.des.data.repo.cache.access.retry.interval.millis = 2000
temn.des.data.repo.caching.grid.name = TemenosGrid
temn.des.data.repo.caching.grid.discovery.connection.string = event-data-repository:47500..47509
temn.des.data.repo.caching.grid.tcp.discovery.server.binding.port = 47500
temn.des.data.repo.caching.grid.tcp.discovery.server.binding.port.range = 10
temn.des.data.repo.caching.grid.tcp.communication.server.binding.port = 47100
temn.des.data.repo.caching.grid.tcp.communication.server.binding.port.range = 10
temn.des.data.repo.server.caching.grid.tcp.communication.server.binding.address = event-data-repository
temn.des.data.repo.ci.caching.grid.tcp.communication.server.binding.address = config-installer
temn.des.data.repo.epa.caching.grid.tcp.communication.server.binding.address = event-pull-adapter
temn.des.data.repo.ep.caching.grid.tcp.communication.server.binding.address = event-processor
temn.des.data.repo.er.caching.grid.tcp.communication.server.binding.address = event-router
temn.des.data.repo.ec.caching.grid.tcp.communication.server.binding.address = event-cleanup
temn.des.data.repo.caching.grid.failure-detection-timeout.seconds = 180
temn.des.data.repo.caching.grid.memory.off-heap.bytes.initial = 1073741824
temn.des.data.repo.caching.grid.memory.off-heap.bytes.max = 2147483648
temn.des.data.repo.caching.grid.data-storage.generate.metrics = true
temn.des.data.repo.caching.persistence.path.unix = /tmp/ignite/des
temn.des.data.repo.caching.staging-table.write-behind.enabled = true
temn.cache.encrypt.objects.stringtypes = false
temn.cache.put.async.max-in-flight = 1
temn.cache.put.async.backpressure.enabled = true

# Event Redelivery
temn.des.ec.event.redelivery.enabled = true
temn.des.ec.event.redelivery.definitions = ec-default
temn.des.ec-ec-default.stream.topic = error
temn.des.ec-ec-default.threshold = 3
temn.des.ec-ec-default.redelivery.time.seconds = 300
temn.des.ec-ec-default.stream.consumergroup.id = des-ec-consumer-ec-default
temn.des.ec-ec-default.stream.producer.client.id = des-ec-producer-ec-default
temn.des.ec.stream.kafka.consumer.poll.timeout.millis = 2000

# Event Pull Adapter
temn.des.epa.threads.count = 4
temn.des.epa.stream.topic.event = pull-event
temn.des.epa.stream.topic.metadata = pull-metadata
temn.des.epa.stream.topic.multipart = pull-event-multi-part
temn.des.epa.stream.consumergroup.id = des-epa-consumer
temn.des.epa.stream.consumer.timeout.millis = 1000
temn.des.epa.stream.producer.client.id = des-epa-producer
temn.des.epa.db.event-table.profiles = data-event
temn.des.epa.data-event.column.id = RECID
temn.des.epa.data-event.column.partitionid = PARTITIONID
temn.des.epa.data-event.column.payload = XMLRECORD
temn.des.epa.data-event.column.payload.data.type = CLOB
temn.des.epa.data-event.column.createdtime = CREATEDTIME
temn.des.epa.data-event.column.processedtime = PROCESSEDTIME
temn.des.epa.data-event.partition.range.start = 1
temn.des.epa.data-event.partition.range.end = 5
temn.des.epa.data-event.tables = F_DATA_EVENTS,FBNK_DATA_EVENTS
temn.des.epa.retry.interval.millis = 10000
temn.des.epa.polling.no.events.wait.millis = 1000
temn.des.epa.polling.batch.size = 1000
temn.des.epa.event.recovery.poll-interval.seconds = 60
temn.des.epa.event.recovery.min-age.seconds = 60
temn.des.epa.event.cache.size = 10000
temn.des.epa.hard.delete.enabled = false
temn.des.epa.event-query.log-warning.threshold.millis = 5000
temn.des.epa.stream.kafka.native.consumer.max.poll.records = 100

# Event Processor
temn.des.ep.incoming-event-transformer.factory.bean.id = incomingT24EventTransformerFactory
temn.des.ep.retry.interval.millis = 10000
temn.des.ep.threads.count = 4
temn.des.ep.partition.range.start = 1
temn.des.ep.partition.range.end = 5
temn.des.ep.topic.source.event = pull-event
temn.des.ep.topic.source.event.multipart = pull-event-multi-part
temn.des.ep.topic.sink.eot = eot
temn.des.ep.topic.sink.event.default = table-update-bnk
temn.des.ep.topic.sink.event.assembled = assembled-event
temn.des.ep.topic.sink.event.multipart = multi-part
temn.des.ep.topic.error = error
temn.des.ep.stream.consumer.timeout.millis = 1000
temn.des.ep.t24.runtime = TAFJ
temn.des.ep.event.assembly.definitions = fundsTransfer, account
temn.des.ep.event.assembly-fundsTransfer.filter.pattern = entityName=(CUSTOMER|ACCOUNT), context.application=FUNDS.TRANSFER
temn.des.ep.event.assembly-fundsTransfer.filter.matcher.type = REGEX
temn.des.ep.event.assembly-account.filter.pattern = entityName=ACCOUNT, context.application=ACCOUNT
temn.des.ep.event.assembly-account.filter.matcher.type = REGEX
temn.des.ep.event.router.definitions = erIF, erTableUpdateBNK, dataEventFundstransfer
temn.des.ep.event.router-erTableUpdateBNK.topic.target = table-update-bnk
temn.des.ep.event.router-erTableUpdateBNK.filter.pattern = company=FBNK, entityName=^((?!IF\\.EVENTS\\.INTERFACE\\.TABLE).)*$
temn.des.ep.event.router-erTableUpdateBNK.filter.matcher.type = REGEX
temn.des.ep.event.router-erIF.topic.target = if-raw
temn.des.ep.event.router-erIF.filter.pattern = entityName=*IF.EVENTS.INTERFACE.TABLE
temn.des.ep.event.router-erIF.filter.matcher.type = ANT
temn.des.ep.event.router-dataEventFundstransfer.topic.target = data-event-fundstransfer
temn.des.ep.event.router-dataEventFundstransfer.filter.pattern = definitionName=fundsTransfer
temn.des.ep.event.router-dataEventFundstransfer.filter.matcher.type = REGEX
temn.des.ep.fail.if-unsuccessful.routing = false
temn.des.ep.stage.event = true
temn.des.ep.deduplicate.event = false
temn.des.ep.kafka.native.consumer.group.id = des-ep-consumer
temn.des.ep.kafka.native.consumer.max.poll.records = 1000
temn.des.ep.kafka.native.producer.client.id = des-ep-producer

# Event Router
temn.des.er.partition.range.start = 1
temn.des.er.partition.range.end = 2
temn.des.er.event.router.definitions = if-avro, if-xml
temn.des.er-if-avro.threads.count = 1
temn.des.er-if-avro.event.transformers = com.temenos.des.ifeventtransformer.transformer.IFEventRawAvroTransformer, com.my_bank.des.transformer.MyBankLowerCaseCompanyIdTransformer
temn.des.er-if-avro.event.filter.pattern = payload.EventData=(.)*^((?!CustomerEvent-DataFlow).)+$(.)*
temn.des.er-if-avro.event.filter.matcher-type = REGEX
temn.des.er-if-avro.data-event.splitter.enabled = false
temn.des.er-if-avro.data-event.filter-t24events = false
temn.des.er-if-avro.stream.topic.source = if-raw
temn.des.er-if-avro.stream.topic.target = if
temn.des.er-if-avro.stream.topic.multipart = multi-part
temn.des.er-if-avro.stream.topic.error = error
temn.des.er-if-avro.stream.consumergroup.id = des-er-consumer-if-avro
temn.des.er-if-avro.stream.producer.client.id = des-er-producer-if-avro
temn.des.er-if-xml.threads.count = 1
temn.des.er-if-xml.event.transformers = com.temenos.des.ifeventtransformer.transformer.IFEventRawXMLTransformer, com.my_bank.des.transformer.MyBankLowerCaseCompanyIdTransformer
temn.des.er-if-xml.event.filter.pattern = payload.EventData=^(.*CustomerEvent-DataFlow.*)+$
temn.des.er-if-xml.event.filter.matcher-type = REGEX
temn.des.er-if-xml.data-event.splitter.enabled = false
temn.des.er-if-xml.data-event.filter-t24events = false
temn.des.er-if-xml.stream.topic.source = if-raw
temn.des.er-if-xml.stream.topic.target = if
temn.des.er-if-xml.stream.topic.multipart = multi-part
temn.des.er-if-xml.stream.topic.error = error
temn.des.er-if-xml.stream.consumergroup.id = des-er-consumer-if-xml
temn.des.er-if-xml.stream.producer.client.id = des-er-producer-if-xml
temn.des.er.stage.event = true
temn.des.er.stream.kafka.consumer.poll.timeout.millis = 2000
temn.des.er.stream.topic.error=error
temn.des.er.topic.error.max.message.size.kb=100

# Config Installer
temn.des.ci.loop.interval.millis = 20000
temn.des.ci.xsd.parser.resolve.imports = false
temn.des.ci.stream.producer.client.id = des-ci-producer-des-schema
temn.des.ci.stream.topic.schema = des-schema
temn.des.ci.stream.topic.install = des-install
temn.des.ci.install.log.stream.enable = false