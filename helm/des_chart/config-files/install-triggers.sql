-- Undo changes if required

-- IF Flow Catalog table
--CREATE TRIGGER F_IF_FL002_AVRO_CONV_STATUS ON F_IF_INTEGRATION_FL002 FOR INSERT AS
--BEGIN
--	SET NOCOUNT ON
--		UPDATE F_IF_INTEGRATION_FL002 SET AVRO_CONVERSION_STATUS = NULL
--		FROM F_IF_INTEGRATION_FL002 IF_STATUS
--		INNER JOIN INSERTED INS ON IF_STATUS.RECID = INS.RECID
--		AND INS.AVRO_CONVERSION_STATUS = NULL
--END;$

DROP TRIGGER IF EXISTS F_DATA_EVENTS_PARTITIONID$
DROP TRIGGER IF EXISTS F_DATA_EVENTS_ILP_PARTITIONID$
DROP TRIGGER IF EXISTS FBNK_DATA_EVENTS_PARTITIONID$
DROP TRIGGER IF EXISTS FBNK_DATA_EVENTS_ILP_PARTITIONID$

DROP TRIGGER IF EXISTS FCOD_DATA_EVENTS_PARTITIONID$
DROP TRIGGER IF EXISTS FCOD_DATA_EVENTS_ILP_PARTITIONID$
-- After insert trigger to update the partition id after a record insert is done on the table.
-- IF NOT EXISTS (SELECT * FROM DELETED) check is done to avoid the update of partition id during update scenario, as trigger will be fired in SQL SERVER.
-- @RECORDID IS NOT NULL check is done when a MERGER WITH INSERT is called this trigger will be enabled, where @RECORDID will be null
-- SO ONLY WHEN INSERTED TABLE HAS A RECID WITHOUT NULL, UPDATE WILL HAPPEN.
CREATE TRIGGER F_DATA_EVENTS_PARTITIONID ON F_DATA_EVENTS FOR INSERT AS
BEGIN
SET NOCOUNT ON
DECLARE @PARTID INT
DECLARE @NEXT_SEQUENCE_VALUE INT
DECLARE @RECORDID NVARCHAR(255)
SELECT @RECORDID = RECID FROM INSERTED
                IF NOT EXISTS (SELECT * FROM DELETED) AND @RECORDID IS NOT NULL
                BEGIN
                SET @NEXT_SEQUENCE_VALUE = next value for partition_seq
                SET @PARTID = [dbo].[GETPARTITIONID]('EventStreamingConf',@NEXT_SEQUENCE_VALUE)
                UPDATE F_DATA_EVENTS SET PARTITIONID = @PARTID WHERE RECID = @RECORDID
                END
END$

CREATE TRIGGER F_DATA_EVENTS_ILP_PARTITIONID ON F_DATA_EVENTS_ILP FOR INSERT AS
BEGIN
SET NOCOUNT ON
DECLARE @PARTID INT
DECLARE @NEXT_SEQUENCE_VALUE INT
DECLARE @RECORDID NVARCHAR(255)
SELECT @RECORDID = RECID FROM INSERTED
                IF NOT EXISTS (SELECT * FROM DELETED) AND @RECORDID IS NOT NULL
                BEGIN
                SET @NEXT_SEQUENCE_VALUE = next value for partition_seq
                SET @PARTID = [dbo].[GETPARTITIONID]('EventStreamingConf',@NEXT_SEQUENCE_VALUE)
                UPDATE F_DATA_EVENTS_ILP SET PARTITIONID = @PARTID WHERE RECID = @RECORDID
                END
END$

CREATE TRIGGER FBNK_DATA_EVENTS_PARTITIONID ON FBNK_DATA_EVENTS FOR INSERT AS
BEGIN
SET NOCOUNT ON
DECLARE @PARTID INT
DECLARE @NEXT_SEQUENCE_VALUE INT
DECLARE @RECORDID NVARCHAR(255)
SELECT @RECORDID = RECID FROM INSERTED
                IF NOT EXISTS (SELECT * FROM DELETED) AND @RECORDID IS NOT NULL
                BEGIN
                SET @NEXT_SEQUENCE_VALUE = next value for partition_seq
                SET @PARTID = [dbo].[GETPARTITIONID]('EventStreamingConf',@NEXT_SEQUENCE_VALUE)
                UPDATE FBNK_DATA_EVENTS SET PARTITIONID = @PARTID WHERE RECID = @RECORDID
                END
END;$

CREATE TRIGGER FBNK_DATA_EVENTS_ILP_PARTITIONID ON FBNK_DATA_EVENTS_ILP FOR INSERT AS
BEGIN
SET NOCOUNT ON
DECLARE @PARTID INT
DECLARE @NEXT_SEQUENCE_VALUE INT
DECLARE @RECORDID NVARCHAR(255)
SELECT @RECORDID = RECID FROM INSERTED
                IF NOT EXISTS (SELECT * FROM DELETED) AND @RECORDID IS NOT NULL
                BEGIN
                SET @NEXT_SEQUENCE_VALUE = next value for partition_seq
                SET @PARTID = [dbo].[GETPARTITIONID]('EventStreamingConf',@NEXT_SEQUENCE_VALUE)
                UPDATE FBNK_DATA_EVENTS_ILP SET PARTITIONID = @PARTID WHERE RECID = @RECORDID
                END
END$

CREATE TRIGGER FCOD_DATA_EVENTS_PARTITIONID ON FCOD_DATA_EVENTS FOR INSERT AS
BEGIN
SET NOCOUNT ON
DECLARE @PARTID INT
DECLARE @NEXT_SEQUENCE_VALUE INT
DECLARE @RECORDID NVARCHAR(255)
SELECT @RECORDID = RECID FROM INSERTED
                IF NOT EXISTS (SELECT * FROM DELETED) AND @RECORDID IS NOT NULL
                BEGIN
                SET @NEXT_SEQUENCE_VALUE = next value for partition_seq
                SET @PARTID = [dbo].[GETPARTITIONID]('EventStreamingConf',@NEXT_SEQUENCE_VALUE)
                UPDATE FCOD_DATA_EVENTS SET PARTITIONID = @PARTID WHERE RECID = @RECORDID
                END
END$

CREATE TRIGGER FCOD_DATA_EVENTS_ILP_PARTITIONID ON FCOD_DATA_EVENTS_ILP FOR INSERT AS
BEGIN
SET NOCOUNT ON
DECLARE @PARTID INT
DECLARE @NEXT_SEQUENCE_VALUE INT
DECLARE @RECORDID NVARCHAR(255)
SELECT @RECORDID = RECID FROM INSERTED
                IF NOT EXISTS (SELECT * FROM DELETED) AND @RECORDID IS NOT NULL
                BEGIN
                SET @NEXT_SEQUENCE_VALUE = next value for partition_seq
                SET @PARTID = [dbo].[GETPARTITIONID]('EventStreamingConf',@NEXT_SEQUENCE_VALUE)
                UPDATE FCOD_DATA_EVENTS_ILP SET PARTITIONID = @PARTID WHERE RECID = @RECORDID
                END
END$
