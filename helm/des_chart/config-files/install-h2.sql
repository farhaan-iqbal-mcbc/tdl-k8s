-- Undo changes if required
ALTER TABLE F_IF_INTEGRATION_FL002 DROP COLUMN IF EXISTS AVRO_CONVERSION_STATUS;
DROP TABLE IF EXISTS F_DATA_EVENTS;
DROP TABLE IF EXISTS F_DATA_EVENTS_ILP;
DROP TABLE IF EXISTS FBNK_DATA_EVENTS;
DROP TABLE IF EXISTS FBNK_DATA_EVENTS_ILP;
DROP VIEW IF EXISTS V_F_RR_XSD_EVENTS_DES;
DELETE FROM F_RR_XSD_EVENTS;
ALTER TABLE F_RR_XSD_EVENTS DROP COLUMN IF EXISTS AVRO_CONVERSION_STATUS;
DROP TABLE IF EXISTS TAFJ_CACHE_KS_INIT;
DROP TABLE IF EXISTS TAFJ_CACHE_CONFIG;
DROP TABLE IF EXISTS TAFJ_CONFIGURATION;
DROP VIEW IF EXISTS V_F_EB_DES_CONFIG;
DROP TABLE IF EXISTS F_EB_DES_CONFIG;
DROP ALIAS IF EXISTS EXTRACTVALUEJS;
DELETE FROM TAFJ_CACHE WHERE RECID = 'F.DATA.EVENTS';
DELETE FROM TAFJ_CACHE WHERE RECID = 'F.DATA.EVENTS.ILP';

-- Function to extract a specific value from a dynamic array
CREATE ALIAS EXTRACTVALUEJS FOR "com.temenos.dbi.storedfunctions.BasicFunctions.extractValueJS";

-- IF Flow Catalog table
ALTER TABLE F_IF_INTEGRATION_FL002 ADD AVRO_CONVERSION_STATUS VARCHAR2(10) DEFAULT NULL;

-- Data event table (XMLRECORD uses VARCHAR instead of CLOB for backward compatibility with H2 1.3.x)
CREATE TABLE IF NOT EXISTS F_DATA_EVENTS (
    RECID                     VARCHAR2(255) NOT NULL,
    XMLRECORD                 VARCHAR,
    CREATEDTIME               TIMESTAMP(9) DEFAULT CURRENT_TIMESTAMP,
    PROCESSEDTIME             TIMESTAMP(9),
    PARTITIONID		          INTEGER DEFAULT 1,
    CONSTRAINT F_DATA_EVENTS_PK PRIMARY KEY (RECID)
);

CREATE TABLE IF NOT EXISTS F_DATA_EVENTS_ILP (
    RECID                     VARCHAR2(255) NOT NULL,
    XMLRECORD                 VARCHAR,
    CREATEDTIME               TIMESTAMP(9) DEFAULT CURRENT_TIMESTAMP,
    PROCESSEDTIME             TIMESTAMP(9),
    PARTITIONID		          INTEGER DEFAULT 1,
    CONSTRAINT F_DATA_EVENTS_ILP_PK PRIMARY KEY (RECID)
);

-- XSD table and view for config-installer to extract XSDs
ALTER TABLE F_RR_XSD_EVENTS ADD AVRO_CONVERSION_STATUS VARCHAR2(10) DEFAULT NULL;
CREATE VIEW IF NOT EXISTS V_F_RR_XSD_EVENTS_DES AS
SELECT
    T.RECID,
    EXTRACTVALUEJS(T.XMLRECORD, 1, 0) AS FROM_DATE,
    EXTRACTVALUEJS(T.XMLRECORD, 2, 0) AS TO_DATE,
    EXTRACTVALUEJS(T.XMLRECORD, 3, 0) AS TABLE_NAME,
    EXTRACTVALUEJS(T.XMLRECORD, 4, 0) AS XSD,
    EXTRACTVALUEJS(T.XMLRECORD, 5, 0) AS COMPANY,
    EXTRACTVALUEJS(T.XMLRECORD, 6, 0) AS FILE_TYPE,
    EXTRACTVALUEJS(T.XMLRECORD, 7, 0) AS SOURCE_TABLE_NAME,
    EXTRACTVALUEJS(T.XMLRECORD, 8, 0) AS SNAPSHOT_FLAG,
    EXTRACTVALUEJS(T.XMLRECORD, 9, 0) AS SNAPSHOT_CHILD_FLAG,
    T.AVRO_CONVERSION_STATUS
FROM F_RR_XSD_EVENTS T;

-- Cache initialisation table
CREATE TABLE TAFJ_CACHE_KS_INIT (
    RECID                     VARCHAR(255),
    CONSTRAINT TAFJ_CACHE_KS_INIT_PK PRIMARY KEY (RECID));
INSERT INTO TAFJ_CACHE_KS_INIT VALUES ('Waz7G611E%+6291Tqz');

-- Cache configuration table
CREATE TABLE IF NOT EXISTS TAFJ_CACHE_CONFIG (
    CONFIGURATION_ID          VARCHAR(255) NOT NULL,
    PROPERTY_KEY              VARCHAR(255) NOT NULL,
    PROPERTY_VALUE            VARCHAR(4000),
    DATE_MODIFIED             VARCHAR(255),
    USER_NAME                 VARCHAR(255) NOT NULL,
    CONSTRAINT TAFJ_CACHE_CONFIG_PK PRIMARY KEY (CONFIGURATION_ID, PROPERTY_KEY));
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.encrypt.objects.stringtypes', '${SQL_TEMN_CACHE_ENCRYPT_OBJECTS_STRINGTYPES:false}', NULL, 'System');
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.put.async.max-in-flight', '5', NULL, 'System');
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.put.async.backpressure.enabled', 'false', NULL, 'System');
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.external.caching.provider','org.apache.ignite.IgniteProvider',NULL, 'System');
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.ignite.conf.file.name','',NULL, 'System');
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.tafj.cache.ignite.check.ips','false',NULL, 'System');
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.ignite.password','6fiHGU8oaQ+F8KdDw9v5jQ==',NULL, 'System');
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.ignite.tnx.timeout','0',NULL, 'System');
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.jdbc.pool.initial.size','1',NULL, 'System');
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.jdbc.pool.min.size','1',NULL, 'System');
INSERT INTO TAFJ_CACHE_CONFIG (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.jdbc.pool.max.size','100',NULL, 'System');

-- Cache mapping table
CREATE TABLE IF NOT EXISTS TAFJ_CACHE( RECID VARCHAR(255), CACHENAME VARCHAR(255), WRITEBATCHROWS VARCHAR2(5), CONSTRAINT TAFJ_CACHE_PK PRIMARY KEY (RECID));
INSERT INTO TAFJ_CACHE (RECID, CACHENAME) VALUES ('F.DATA.EVENTS','FDataEventCache');
INSERT INTO TAFJ_CACHE (RECID, CACHENAME) VALUES ('F.DATA.EVENTS.ILP','FDataEventCache');


-- TAFJ configuration table
CREATE TABLE IF NOT EXISTS TAFJ_CONFIGURATION (
    CONFIGURATION_ID          VARCHAR(255) NOT NULL,
    PROPERTY_KEY              VARCHAR(255) NOT NULL,
    PROPERTY_VALUE            VARCHAR(4000),
    DATE_MODIFIED             VARCHAR(255),
    USER_NAME                 VARCHAR(255) NOT NULL,
    CONSTRAINT TAFJ_CONFIGURATION_PK PRIMARY KEY (CONFIGURATION_ID, PROPERTY_KEY));
-- TAFJ configuration takes presidence over TAFJCache configuration
INSERT INTO TAFJ_CONFIGURATION (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.tafj.runtime.use.external.caching', 'false', NULL, 'System');
INSERT INTO TAFJ_CONFIGURATION (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.use.des.for.f.data.events', 'true', NULL, 'System');
INSERT INTO TAFJ_CONFIGURATION (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.f.data.events.partition.size', '1', NULL, 'System');
INSERT INTO TAFJ_CONFIGURATION (CONFIGURATION_ID, PROPERTY_KEY, PROPERTY_VALUE, DATE_MODIFIED, USER_NAME) VALUES ('EventStreamingConf', 'temn.cache.external.caching.provider', 'org.apache.ignite.IgniteProvider', NULL, 'System');

-- DES configuration staging table
CREATE TABLE IF NOT EXISTS F_EB_DES_CONFIG (
    RECID                     VARCHAR2(255) NOT NULL,
    XMLRECORD                 VARCHAR2(2147483647) NOT NULL,
    CONSTRAINT F_EB_DES_CONFIG_PK PRIMARY KEY (RECID)
);
CREATE VIEW IF NOT EXISTS V_F_EB_DES_CONFIG AS
SELECT
    A.RECID,
    A.XMLRECORD AS THE_RECORD,
    EXTRACTVALUEJS(A.XMLRECORD, 1, 0) AS PROPERTY_KEY,
    A.XMLRECORD AS PROPERTY_KEY_1,
    EXTRACTVALUEJS(A.XMLRECORD, 2, 0) AS PROPERTY_VALUE,
    A.XMLRECORD AS PROPERTY_VALUE_2,
    EXTRACTVALUEJS(A.XMLRECORD, 3, 0) AS RESERVED_10,
    EXTRACTVALUEJS(A.XMLRECORD, 4, 0) AS RESERVED_9,
    EXTRACTVALUEJS(A.XMLRECORD, 5, 0) AS RESERVED_8,
    EXTRACTVALUEJS(A.XMLRECORD, 6, 0) AS RESERVED_7,
    EXTRACTVALUEJS(A.XMLRECORD, 7, 0) AS RESERVED_6,
    EXTRACTVALUEJS(A.XMLRECORD, 8, 0) AS RESERVED_5,
    EXTRACTVALUEJS(A.XMLRECORD, 9, 0) AS RESERVED_4,
    EXTRACTVALUEJS(A.XMLRECORD, 10, 0) AS RESERVED_3,
    EXTRACTVALUEJS(A.XMLRECORD, 11, 0) AS RESERVED_2,
    EXTRACTVALUEJS(A.XMLRECORD, 12, 0) AS RESERVED_1
FROM F_EB_DES_CONFIG A;

DROP TABLE TAFJ_WORK;
CREATE TABLE TAFJ_WORK(
    RECID int not null,
    APPLNAME varchar (50),
    TABLENAME varchar (50),
    STATUS varchar (7),
    TABLEERRORLOG varchar (255),
    MAXRECS int,
    NOOFRECS int,
    PROCESSTIME int,
    FINISHEDDATE varchar (30),
    TYPE varchar (1),
    VIEWCREATED varchar (11),
    VIEWERRORLOG varchar (255)
);

